syntax = "proto3";
package sentinel.node.v1;

option go_package = "github.com/sentinel-official/hub/x/node/types";

import "cosmos/base/query/v1beta1/pagination.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";

import "sentinel/types/v1/status.proto";
import "sentinel/node/v1/node.proto";

message NodesRequest {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  sentinel.types.v1.Status status                  = 1;
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

message NodesForProviderRequest {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string address                                   = 1;
  sentinel.types.v1.Status status                  = 2;
  cosmos.base.query.v1beta1.PageRequest pagination = 3;
}

message NodeRequest {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string address = 1;
}

message NodesResponse {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  repeated Node nodes = 1 [ (gogoproto.nullable) = false ];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message NodesForProviderResponse {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  repeated Node nodes = 1 [ (gogoproto.nullable) = false ];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message NodeResponse {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  Node node = 1 [ (gogoproto.nullable) = false ];
}

service QueryService {
  rpc Nodes(NodesRequest) returns (NodesResponse) {
    option (google.api.http).get = "/nodes";
  }

  rpc NodesForProvider(NodesForProviderRequest)
      returns (NodesForProviderResponse) {
    option (google.api.http).get = "/providers/{address}/nodes";
  }

  rpc Node(NodeRequest) returns (NodeResponse) {
    option (google.api.http).get = "/nodes/{address}";
  }
}
